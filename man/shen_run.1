.\"t
.\" Automatically generated by Pandoc 1.17.1
.\"
.TH "shen_run" "1" "June 20, 2012" "" ""
.hy
.SH NAME
.PP
\f[B]shen_run\f[] \-\- Shen REPL trampoline
.SH SYNOPSIS
.PP
\f[B]shen_run\f[] [\f[B]\-nc\f[]] [\f[B]\-ne\f[]] [\f[I]script\f[]]
[\f[I]args...\f[]]
.SH DESCRIPTION
.PP
\f[B]shen_run\f[] starts \f[B]shen\f[] and loads \f[I]~/.shen.shen\f[]
if the file exists and \f[B]\-nc\f[] is not set.
If a \f[I]script\f[] file is given then \f[B]shen_run\f[] loads it and
calls the \f[B]main\f[] function defined, there discarding all
diagnostic messages.
Only output strings and error messages are printed to \f[B]stdout\f[]
and \f[B]stderr\f[], respectively.
The \f[B]main\f[] function receives a list of command line arguments
(\f[B]args...\f[]) and must return a boolean status of success.
.PP
The flags are as follows:
.PP
.TS
tab(@);
l l.
T{
\f[B]\-nc\f[]
T}@T{
Don\[aq]t load config file (\f[I]~./shen.shen\f[]).
T}
T{
\f[B]\-ne\f[]
T}@T{
Don\[aq]t exit on end\-of\-file in standard input.
T}
.TE
.SS Example script contents
.IP
.nf
\f[C]
(define\ main
\ \ []\ \->\ (do\ (output\ "no\ arguments~%")
\ \ \ \ \ \ \ \ \ \ \ \ false)
\ \ ["\-error"\ |\ _]\ \->\ (error\ "Oops.")
\ \ Args\ \->\ (do\ (output\ "~A\ arguments~%"\ (length\ Args))
\ \ \ \ \ \ \ \ \ \ \ \ \ \ true))
\f[]
.fi
.SH AUTHORS
Ramil Farkhshatov.
